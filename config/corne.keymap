/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W           &kp E           &kp R        &kp T               &kp Y             &kp U               &kp I           &kp O           &kp P     &kp LEFT_BRACKET
&kp CAPS   &kp A  &mt LEFT_GUI S  &mt LEFT_ALT D  &mt LCTRL F  &mt LEFT_SHIFT G    &mt LEFT_SHIFT H  &mt LEFT_CONTROL J  &mt LEFT_ALT K  &mt LEFT_GUI L  &kp SEMI  &kp SQT
&kp GRAVE  &kp Z  &kp X           &kp C           &kp V        &kp B               &kp N             &kp M               &kp COMMA       &kp DOT         &kp FSLH  &kp RIGHT_BRACKET
                                  &kp ESCAPE      &mo 1        &kp SPACE           &kp RET           &mo 2               &kp BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE     &kp LS(N1)  &kp LS(NUMBER_2)  &kp LS(N3)         &kp LS(N4)   &kp LS(N5)       &kp LS(N6)        &kp LS(N7)            &kp LS(N8)  &kp LS(N9)             &kp LS(N0)         &kp LS(MINUS)
&kp CAPSLOCK  &kp N1      &kp N2            &kp N3             &kp N4       &kp NUMBER_5     &kp NUMBER_6      &kp N7                &kp N8      &kp N9                 &kp N0             &kp MINUS
&kp ESCAPE    &kp SLASH   &kp LS(COMMA)     &kp LS(BACKSLASH)  &kp LS(DOT)  &kp BACKSLASH    &kp LEFT_BRACKET  &kp LS(LEFT_BRACKET)  &kp EQUAL   &kp LS(RIGHT_BRACKET)  &kp RIGHT_BRACKET  &kp LS(EQUAL)
                                            &trans             &trans       &trans           &trans            &mo 3                 &kp DEL
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7    &kp F8    &kp F9  &kp F10    &kp F11  &kp F12
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &none    &none
&none       &none         &none         &none         &none         &none           &none     &none     &none   &none      &none    &none
                                        &trans        &mo 3         &trans          &trans    &trans    &trans
            >;
        };

        layer_3 {
            bindings = <
&kp C_RESET  &trans  &trans  &kp C_BRI_UP  &trans  &kp C_VOLUME_UP    &kp C_VOLUME_DOWN  &trans  &kp C_BRI_DEC  &trans  &trans  &trans
&trans       &trans  &trans  &trans        &trans  &trans             &trans             &trans  &trans         &trans  &trans  &trans
&trans       &trans  &trans  &trans        &trans  &trans             &trans             &trans  &trans         &trans  &trans  &trans
                             &trans        &trans  &trans             &trans             &trans  &trans
            >;
        };
    };
};
